[project]
name = ""
version = ""
description = ""
authors = [
    {name = "redjax", email = "none@none.com"},
]
dependencies = [
    "dynaconf>=3.2.2",
    "stackprinter>=0.2.10",
    "sqlalchemy>=2.0.20",
    "pydantic>=2.3.0",
    "httpx>=0.24.1",
    "loguru>=0.7.1",
    "msgpack>=1.0.5",
    "diskcache>=5.6.3",
    "red-utils>=0.1.17",
    "alembic>=1.12.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}

[tool.pdm.dev-dependencies]
dev = [
    "black>=23.9.0",
    "ruff>=0.0.287",
]

[tool.pdm.scripts]

###############
# Format/Lint #
###############

# Check only, don't fix
check = {cmd = "black ."}
# Check and fix
format = {cmd = "ruff check . --fix"}
## Run both
lint = {shell = "echo 'Running Python Black syntax check.' && pdm run black . && echo 'Running Ruff checks' && pdm run ruff check . --fix"}

########################
# Start/Launch Scripts #
########################

#  Run main app or script. Launches from app/
start = { shell = "cd app && pdm run python main.py"}

start-setup-dev = { shell = "cd base-setup/src && pdm run python sqlalchemy_setup", env = { ENV_FOR_DYNACONF = "dev" }}
start-setup-test = { shell = "cd base-setup/src && pdm run python sqlalchemy_setup/test.py", env = { ENV_FOR_DYNACONF = "dev" } }

start-useraddr-dev = { shell = "cd user-addr-relationship/src && pdm run python user_addr_relationship", env = { ENV_FOR_DYNACONF = "dev" }}
start-useraddr-test = { shell = "cd user-addr-relationship/src && pdm run python user_addr_relationship/test.py", env = { ENV_FOR_DYNACONF = "dev" } }

###########
# Alembic #
###########

## Create initial commit
alembic-init = {cmd = "alembic revision -m 'Initial commit.'"}

## Upgrade Alembic head after making model changes
alembic-upgrade = {cmd = "alembic upgrade head" }

## Run migrations
#  Prompts for a commit message
alembic-migrate = {shell = "read -p 'Commit message: ' commit_msg && pdm run alembic revision --autogenerate -m '${commit_msg}'" }

## Run full migration, upgrade - commit - revision
migrations = { shell = "pdm run alembic upgrade head && read -p 'Commit message: ' commit_msg && pdm run alembic revision --autogenerate -m '${commit_msg}'" }

######################
# Export Requirement #
######################

#  Export production requirements
export = {cmd = "pdm export --prod -o requirements.txt --without-hashes"}
#  Export only development requirements
export-dev = {cmd = "pdm export -d -o requirements.dev.txt --without-hashes"}
## Uncomment if/when using a CI group
# export-ci = {cmd = "pdm export -G ci -o requirements.ci.txt --without-hashes"}
